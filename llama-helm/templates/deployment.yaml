{{- if eq .Values.STATUS "present" }}
  {{- if .Values.SERVICE }}
apiVersion: apps/v1
kind: Deployment
    {{- end }}
metadata:
  name: {{ .Values.SERVICE.NAME }}
  namespace: {{ .Values.NAMESPACE }}
  labels:
    app: {{ .Values.SERVICE.NAME }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    date: "{{ now | unixEpoch }}"
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.SERVICE.NAME }}
  template:
    metadata:
      labels:
        app: {{ .Values.SERVICE.NAME }}
        date: "{{ now | unixEpoch }}"
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ .Values.SERVICE.NAME }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        image: {{ .Values.SERVICE.IMAGE.NAME }}
        imagePullPolicy: "Always"
        ports:
        - containerPort: 11434
          protocol: TCP
        {{- if .Values.SERVICE.ENV }}
        envFrom:
        - secretRef:
            name: {{ .Values.SERVICE.NAME }}-env
        {{- end }}
        {{- if .Values.SERVICE.RESOURCES }}
        resources:
          requests:
          {{- if .Values.SERVICE.RESOURCES.REQUESTS }}
            {{- if .Values.SERVICE.RESOURCES.REQUESTS.CPU }}
            cpu: {{ .Values.SERVICE.RESOURCES.REQUESTS.CPU }}
            {{- end }}
            {{- if .Values.SERVICE.RESOURCES.REQUESTS.MEMORY }}
            memory: {{ .Values.SERVICE.RESOURCES.REQUESTS.MEMORY }}
            {{- end }}
          {{- else }}
            {{- if .Values.SERVICE.RESOURCES.LIMITS.CPU }}
            cpu: {{ .Values.SERVICE.RESOURCES.LIMITS.CPU }}
            {{- end }}
            {{- if .Values.SERVICE.RESOURCES.LIMITS.MEMORY }}
            memory: {{ .Values.SERVICE.RESOURCES.LIMITS.MEMORY }}
            {{- end }}
            {{- if .Values.SERVICE.RESOURCES.LIMITS.GPU }}
              {{- range $key, $value := .Values.SERVICE.RESOURCES.LIMITS.GPU }}
            {{ $key }}: {{ $value }}
              {{- end}}
            {{- end }}
          {{- end }}
          {{- if .Values.SERVICE.RESOURCES.LIMITS }}
          limits:
            {{- if .Values.SERVICE.RESOURCES.LIMITS.CPU }}
            cpu: {{ .Values.SERVICE.RESOURCES.LIMITS.CPU }}
            {{- end }}
            {{- if .Values.SERVICE.RESOURCES.LIMITS.MEMORY }}
            memory: {{ .Values.SERVICE.RESOURCES.LIMITS.MEMORY }}
            {{- end }}
            {{- if .Values.SERVICE.RESOURCES.LIMITS.GPU }}
              {{- range $key, $value := .Values.SERVICE.RESOURCES.LIMITS.GPU }}
            {{ $key }}: {{ $value }}
              {{- end}}
            {{- end }}
          {{- end }}
        {{- end }}
        livenessProbe:
          initialDelaySeconds: 10
          httpGet:
            path: /
            port: 11434
          timeoutSeconds: 1
        readinessProbe:
          initialDelaySeconds: 5
          httpGet:
            path: /
            port: 11434
          timeoutSeconds: 1
        {{- if .Values.SERVICE.STORAGE }}
        volumeMounts:
          - name: {{ .Values.SERVICE.NAME }}-data
            mountPath: /.ollama/models
            readOnly: false
        {{- end }}
        command:
            - /bin/bash
            - -c
            - |
              /bin/ollama serve &
              # Record Process ID.
              pid=$!

              # Pause for Ollama to start.
              sleep 5

              echo "ðŸ”´ Retrieve LLAMA3 model..."
              ollama pull llama3
              echo "ðŸŸ¢ Retrieve LLAMA3 model Done!"

              echo "ðŸ”´ Keep alive llama3"
              ollama run --keepalive -1s llama3 ""
              ollama run --keepalive -1s llama3 ""
              ollama run --keepalive -1s llama3 ""
              echo "ðŸŸ¢ Keep alive llama3 Done!"

              # Wait for Ollama process to finish.
              wait $pid
      dnsPolicy: ClusterFirst
      {{- if .Values.SERVICE.RESOURCES.LIMITS.GPU }}
      runtimeClassName: "nvidia"
      {{- end }}
      {{- if .Values.SERVICE.SELECTOR }}
      nodeSelector:
        {{- if .Values.SERVICE.SELECTOR.NODE }}
          {{- range $key, $value := .Values.SERVICE.SELECTOR.NODE }}
        {{ $key }}: "{{ $value }}"
          {{- end}}
        {{- end }}
      {{- end }}
      restartPolicy: Always
      schedulerName: default-scheduler
      {{- if .Values.SERVICE.STORAGE }}
      volumes:
        - name: {{ .Values.SERVICE.NAME }}-data
          persistentVolumeClaim:
            claimName: {{ .Values.SERVICE.NAME }}-data
      {{- end }}
    {{- if eq .Values.OPENSHIFT true }}
    triggers:
    - type: ConfigChange
    {{- end }}
  {{- end }}
